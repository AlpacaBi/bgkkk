C51 COMPILER V9.00   RC522                                                                 06/16/2016 19:24:01 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE RC522
OBJECT MODULE PLACED IN RC522.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE RC522.C BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include<reg52.h>
   2          #include<intrins.h>
   3          #include<main.h>
   4          #include<mfrc522.h>
   5          #include<string.h> 
   6          #define MAXRLEN 18
   7          sfr   RCAP2LH =   0xCA;
   8          sfr   T2LH    =   0xCC;                        
   9          /////////////////////////////////////////////////////////////////////
  10          //功    能：寻卡
  11          //参数说明: req_code[IN]:寻卡方式
  12          //                0x52 = 寻感应区内所有符合14443A标准的卡
  13          //                0x26 = 寻未进入休眠状态的卡
  14          //          pTagType[OUT]：卡片类型代码
  15          //                0x4400 = Mifare_UltraLight
  16          //                0x0400 = Mifare_One(S50)
  17          //                0x0200 = Mifare_One(S70)
  18          //                0x0800 = Mifare_Pro(X)
  19          //                0x4403 = Mifare_DESFire
  20          //返    回: 成功返回MI_OK
  21          /////////////////////////////////////////////////////////////////////
  22          char PcdRequest(unsigned char req_code,unsigned char *pTagType){
  23   1         char status;  
  24   1         unsigned int  unLen;
  25   1         unsigned char ucComMF522Buf[MAXRLEN]; 
  26   1         ClearBitMask(Status2Reg,0x08);
  27   1         WriteRawRC(BitFramingReg,0x07);
  28   1         SetBitMask(TxControlReg,0x03);
  29   1         ucComMF522Buf[0] = req_code;
  30   1         status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,1,ucComMF522Buf,&unLen);
  31   1         if ((status == MI_OK) && (unLen == 0x10))
  32   1         {    
  33   2             *pTagType     = ucComMF522Buf[0];
  34   2             *(pTagType+1) = ucComMF522Buf[1];
  35   2         }
  36   1         else
  37   1         {   status = MI_ERR;   }   
  38   1         return status;
  39   1      }
  40          
  41          /////////////////////////////////////////////////////////////////////
  42          //功    能：防冲撞
  43          //参数说明: pSnr[OUT]:卡片序列号，4字节
  44          //返    回: 成功返回MI_OK
  45          /////////////////////////////////////////////////////////////////////  
  46          char PcdAnticoll(unsigned char *pSnr)
  47          {
  48   1          char status;
  49   1          unsigned char i,snr_check=0;
  50   1          unsigned int  unLen;
  51   1          unsigned char ucComMF522Buf[MAXRLEN]; 
  52   1          
  53   1      
  54   1          ClearBitMask(Status2Reg,0x08);
  55   1          WriteRawRC(BitFramingReg,0x00);
C51 COMPILER V9.00   RC522                                                                 06/16/2016 19:24:01 PAGE 2   

  56   1          ClearBitMask(CollReg,0x80);
  57   1       
  58   1          ucComMF522Buf[0] = PICC_ANTICOLL1;
  59   1          ucComMF522Buf[1] = 0x20;
  60   1      
  61   1          status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,2,ucComMF522Buf,&unLen);
  62   1      
  63   1          if (status == MI_OK)
  64   1          {
  65   2               for (i=0; i<4; i++)
  66   2               {   
  67   3                   *(pSnr+i)  = ucComMF522Buf[i];
  68   3                   snr_check ^= ucComMF522Buf[i];
  69   3               }
  70   2               if (snr_check != ucComMF522Buf[i])
  71   2               {   status = MI_ERR;    }
  72   2          }
  73   1          
  74   1          SetBitMask(CollReg,0x80);
  75   1          return status;
  76   1      }
  77          
  78          /////////////////////////////////////////////////////////////////////
  79          //功    能：复位RC522
  80          //返    回: 成功返回MI_OK
  81          /////////////////////////////////////////////////////////////////////
  82          char PcdReset(void){
  83   1          MF522_RST=1;
  84   1          _nop_();//空机器指令
  85   1          MF522_RST=0;
  86   1          _nop_();
  87   1          MF522_RST=1;
  88   1           _nop_();
  89   1          WriteRawRC(CommandReg,PCD_RESETPHASE);
  90   1              _nop_();
  91   1                  
  92   1      
  93   1          WriteRawRC(ModeReg,0x3D);            //和Mifare卡通讯，CRC初始值0x6363，CRCPreset=01
  94   1          WriteRawRC(TReloadRegL,30);          //定时器重装值，分为两个8位寄存器，初始值都为0x00      
  95   1          WriteRawRC(TReloadRegH,0);
  96   1          WriteRawRC(TModeReg,0x8D);           //内部定时器的设置1000 1101,后四位为TPrescalerReg的高四位
  97   1          WriteRawRC(TPrescalerReg,0x3E);      //为TPregScaler低8位，Ftimer = 6.78MHZ/TPreScaler
  98   1          WriteRawRC(TxAutoReg,0x40);     
  99   1          return MI_OK;
 100   1      }
 101          //////////////////////////////////////////////////////////////////////
 102          //设置RC632的工作方式 
 103          //////////////////////////////////////////////////////////////////////
 104          char M500PcdConfigISOType(unsigned char type){
 105   1         if (type == 'A')                     //ISO14443_A
 106   1         { 
 107   2             ClearBitMask(Status2Reg,0x08);
 108   2             WriteRawRC(ModeReg,0x3D);//3
 109   2             WriteRawRC(RxSelReg,0x86);//
 110   2             WriteRawRC(RFCfgReg,0x7F);   //4F
 111   2                 WriteRawRC(TReloadRegL,30);//tmoLength);// TReloadVal = 'h6a =tmoLength(dec) 
 112   2                 WriteRawRC(TReloadRegH,0);
 113   2             WriteRawRC(TModeReg,0x8D);
 114   2                 WriteRawRC(TPrescalerReg,0x3E);
 115   2                  delay_10ms(1);
 116   2             PcdAntennaOn();
 117   2         }
C51 COMPILER V9.00   RC522                                                                 06/16/2016 19:24:01 PAGE 3   

 118   1         else{ return -1; }
 119   1         
 120   1         return MI_OK;
 121   1      }
 122          /////////////////////////////////////////////////////////////////////
 123          //功    能：读RC632寄存器
 124          //参数说明：Address[IN]:寄存器地址
 125          //返    回：读出的值
 126          /////////////////////////////////////////////////////////////////////
 127          unsigned char ReadRawRC(unsigned char Address){
 128   1           unsigned char i, ucAddr;
 129   1           unsigned char ucResult=0;
 130   1      
 131   1           MF522_SCK = 0;
 132   1           MF522_NSS = 0;
 133   1           ucAddr = ((Address<<1)&0x7E)|0x80;
 134   1      
 135   1           for(i=8;i>0;i--)
 136   1           {
 137   2               MF522_SI = ((ucAddr&0x80)==0x80);
 138   2               MF522_SCK = 1;
 139   2               ucAddr <<= 1;
 140   2               MF522_SCK = 0;
 141   2           }
 142   1      
 143   1           for(i=8;i>0;i--)
 144   1           {
 145   2               MF522_SCK = 1;
 146   2               ucResult <<= 1;
 147   2               ucResult|=(bit)MF522_SO;
 148   2               MF522_SCK = 0;
 149   2           }
 150   1      
 151   1           MF522_NSS = 1;
 152   1           MF522_SCK = 1;
 153   1           return ucResult;
 154   1      } 
 155          
 156          /////////////////////////////////////////////////////////////////////
 157          //功    能：写RC632寄存器
 158          //参数说明：Address[IN]:寄存器地址
 159          //          value[IN]:写入的值
 160          /////////////////////////////////////////////////////////////////////
 161          void WriteRawRC(unsigned char Address, unsigned char value){  
 162   1          unsigned char i, ucAddr;
 163   1      
 164   1          MF522_SCK = 0;
 165   1          MF522_NSS = 0;
 166   1          ucAddr = ((Address<<1)&0x7E);
 167   1      
 168   1          for(i=8;i>0;i--)
 169   1          {
 170   2              MF522_SI = ((ucAddr&0x80)==0x80);
 171   2              MF522_SCK = 1;
 172   2              ucAddr <<= 1;
 173   2              MF522_SCK = 0;
 174   2          }
 175   1      
 176   1          for(i=8;i>0;i--)
 177   1          {
 178   2              MF522_SI = ((value&0x80)==0x80);
 179   2              MF522_SCK = 1;
C51 COMPILER V9.00   RC522                                                                 06/16/2016 19:24:01 PAGE 4   

 180   2              value <<= 1;
 181   2              MF522_SCK = 0;
 182   2          }
 183   1          MF522_NSS = 1;
 184   1          MF522_SCK = 1;
 185   1      }
 186          
 187          /////////////////////////////////////////////////////////////////////
 188          //功    能：置RC522寄存器位
 189          //参数说明：reg[IN]:寄存器地址
 190          //          mask[IN]:置位值
 191          /////////////////////////////////////////////////////////////////////
 192          void SetBitMask(unsigned char reg,unsigned char mask)  
 193          {
 194   1          char tmp = 0x0;
 195   1          tmp = ReadRawRC(reg);
 196   1          WriteRawRC(reg,tmp | mask);  // set bit mask
 197   1      }
 198          
 199          /////////////////////////////////////////////////////////////////////
 200          //功    能：清RC522寄存器位
 201          //参数说明：reg[IN]:寄存器地址
 202          //          mask[IN]:清位值
 203          /////////////////////////////////////////////////////////////////////
 204          void ClearBitMask(unsigned char reg,unsigned char mask)  
 205          {
 206   1          char tmp = 0x0;
 207   1          tmp = ReadRawRC(reg);
 208   1          WriteRawRC(reg, tmp & ~mask);  // clear bit mask
 209   1      }
 210          
 211          /////////////////////////////////////////////////////////////////////
 212          //功    能：通过RC522和ISO14443卡通讯
 213          //参数说明：Command[IN]:RC522命令字
 214          //          pInData[IN]:通过RC522发送到卡片的数据
 215          //          InLenByte[IN]:发送数据的字节长度
 216          //          pOutData[OUT]:接收到的卡片返回数据
 217          //          *pOutLenBit[OUT]:返回数据的位长度
 218          /////////////////////////////////////////////////////////////////////
 219          char PcdComMF522(unsigned char Command, 
 220                           unsigned char *pInData, 
 221                           unsigned char InLenByte,
 222                           unsigned char *pOutData, 
 223                           unsigned int  *pOutLenBit)
 224          {
 225   1          char status = MI_ERR;
 226   1          unsigned char irqEn   = 0x00;
 227   1          unsigned char waitFor = 0x00;
 228   1          unsigned char lastBits;
 229   1          unsigned char n;
 230   1          unsigned int i;
 231   1          switch (Command)
 232   1          {
 233   2             case PCD_AUTHENT:
 234   2                irqEn   = 0x12;
 235   2                waitFor = 0x10;
 236   2                break;
 237   2             case PCD_TRANSCEIVE:
 238   2                irqEn   = 0x77;
 239   2                waitFor = 0x30;
 240   2                break;
 241   2             default:
C51 COMPILER V9.00   RC522                                                                 06/16/2016 19:24:01 PAGE 5   

 242   2               break;
 243   2          }
 244   1         
 245   1          WriteRawRC(ComIEnReg,irqEn|0x80);
 246   1          ClearBitMask(ComIrqReg,0x80);
 247   1          WriteRawRC(CommandReg,PCD_IDLE);
 248   1          SetBitMask(FIFOLevelReg,0x80);
 249   1          
 250   1          for (i=0; i<InLenByte; i++)
 251   1          {   WriteRawRC(FIFODataReg, pInData[i]);    }
 252   1          WriteRawRC(CommandReg, Command);
 253   1         
 254   1          
 255   1          if (Command == PCD_TRANSCEIVE)
 256   1          {    SetBitMask(BitFramingReg,0x80);  }
 257   1          
 258   1      //    i = 600;//根据时钟频率调整，操作M1卡最大等待时间25ms
 259   1       i = 2000;//900,1100,1700,2000,2700
 260   1          do 
 261   1          {
 262   2               n = ReadRawRC(ComIrqReg);
 263   2               i--;
 264   2          }
 265   1          while ((i!=0) && !(n&0x01) && !(n&waitFor));
 266   1          ClearBitMask(BitFramingReg,0x80);
 267   1                    
 268   1          if (i!=0)
 269   1          {    
 270   2               if(!(ReadRawRC(ErrorReg)&0x1B))
 271   2               {
 272   3                   status = MI_OK;
 273   3                   if (n & irqEn & 0x01)
 274   3                   {   status = MI_NOTAGERR;   }
 275   3                   if (Command == PCD_TRANSCEIVE)
 276   3                   {
 277   4                      n = ReadRawRC(FIFOLevelReg);
 278   4                      lastBits = ReadRawRC(ControlReg) & 0x07;
 279   4                      if (lastBits)
 280   4                      {   *pOutLenBit = (n-1)*8 + lastBits;   }
 281   4                      else
 282   4                      {   *pOutLenBit = n*8;   }
 283   4                      if (n == 0)
 284   4                      {   n = 1;    }
 285   4                      if (n > MAXRLEN)
 286   4                      {   n = MAXRLEN;   }
 287   4                      for (i=0; i<n; i++)
 288   4                      {   pOutData[i] = ReadRawRC(FIFODataReg);    }
 289   4                                      
 290   4                  }
 291   3               }
 292   2               else
 293   2               {   status = MI_ERR;   }
 294   2         }
 295   1         
 296   1      
 297   1         SetBitMask(ControlReg,0x80);           // stop timer now
 298   1         WriteRawRC(CommandReg,PCD_IDLE); 
 299   1         return status;
 300   1      }
 301          
 302          
 303          /////////////////////////////////////////////////////////////////////
C51 COMPILER V9.00   RC522                                                                 06/16/2016 19:24:01 PAGE 6   

 304          //开启天线  
 305          //每次启动或关闭天险发射之间应至少有1ms的间隔
 306          /////////////////////////////////////////////////////////////////////
 307          void PcdAntennaOn(){
 308   1          unsigned char i;
 309   1          i = ReadRawRC(TxControlReg);
 310   1          if (!(i & 0x03))
 311   1          {
 312   2              SetBitMask(TxControlReg, 0x03);
 313   2          }
 314   1      }
 315          
 316          
 317          /////////////////////////////////////////////////////////////////////
 318          //关闭天线
 319          /////////////////////////////////////////////////////////////////////
 320          void PcdAntennaOff()
 321          {
 322   1          ClearBitMask(TxControlReg, 0x03);
 323   1      }
 324          
 325          ///////////////////////////////////////////////////////////////////////
 326          // Delay 10ms
 327          ///////////////////////////////////////////////////////////////////////
 328          void delay_10ms(unsigned int _10ms)
 329          {
 330   1      #ifndef NO_TIMER2
 331   1          RCAP2LH = RCAP2_10ms;
 332   1          T2LH    = RCAP2_10ms;
 333   1          
 334   1          TR2 = TRUE;
 335   1          while (_10ms--)
 336   1          {
 337   2                  while (!TF2);
 338   2                  TF2 = FALSE;
 339   2          }
 340   1          TR2 = FALSE;
 341   1      #else
                  while (_10ms--)
                  {
                          delay_50us(19);
                          if (CmdValid)
                              return;
                          delay_50us(20);
                          if (CmdValid)
                              return;
                          delay_50us(20);
                          if (CmdValid)
                              return;
                          delay_50us(20);
                          if (CmdValid)
                              return;
                          delay_50us(20);
                          if (CmdValid )
                              return;
                          delay_50us(20);
                          if (CmdValid)
                              return;
                          delay_50us(20);
                          if (CmdValid)
                              return;
                          delay_50us(20);
C51 COMPILER V9.00   RC522                                                                 06/16/2016 19:24:01 PAGE 7   

                          if (CmdValid)
                              return;
                          delay_50us(20);
                          if (CmdValid)
                              return;
                          delay_50us(19);
                          if (CmdValid)
                              return;
                  }
              #endif
 376   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    948    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      66
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
